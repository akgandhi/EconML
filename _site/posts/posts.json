[
  {
    "path": "posts/2021-02-08-hello-world/",
    "title": "Hello World",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Sheng Chao Ho",
        "url": {}
      }
    ],
    "date": "2021-02-08",
    "categories": [],
    "contents": "\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-02-08T07:04:33+08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-02-03-predictive-accuracy-the-what-and-the-how/",
    "title": "Predictive Accuracy: The What and the How",
    "description": "measuring and managing the performance of an algorithmic model",
    "author": [
      {
        "name": "Amit Gandhi",
        "url": {}
      }
    ],
    "date": "2021-02-03",
    "categories": [],
    "contents": "\r\nIntroduction\r\nIn the last post, we examined decision tree as an algorithmic model to understand the behavior of data. As we saw, the optimal tree is one where we grew a large tree, and pruned it to avoid an “overfitting problem” as measured by the cost complexity criterion. But what is the over-fitting problem with algorithmic models, and why did the cost complexity criterion allow us to manage it?\r\nTrees are formed via an algorithm - CART - which is a predictive structure for predicting an outcome variable \\(Y\\) from explanatory variables \\(X\\). The particular tree that was formed depended on two key inputs\r\nThe training sample \\(D = \\{(y_1, x_1),\\dots, (y_n, x_n)\\}\\)\r\nThe tuning parameters (also called hyperparameters) \\(\\eta\\) which governs the behavior of the algorithm.\r\nThe predictive structure is connected to the conditional distribution of the outcome variable \\(Y\\) given the explanatory variables \\(X\\), e.g., a feature \\(F_{Y\\mid X}(y \\mid X = x)\\).\r\nGiven the training sample \\(D\\) and hyperparameters, the CART algorithm generates a fitted predictor \\(\\hat{m}\\). Although we do not have that much choice over the training sample \\(D\\) (although as we will see below, we have some choice), we do have more discretion over the tuning parameters. Thus a very practical problem we face in algorithmic model is that we must se tthe value of \\(\\eta\\), e.g., \\(\\hat{\\eta}\\). This process is called (rather simply) tuning. A more elaborate description would be hyperparameter optimization\r\nIn this post we examine the more general principles around tuning with an eye towards its practical implementation in the case of the CART algorithm.\r\nThe tuning problem\r\nWhat are the tuning parameters in CART? Lets take a look a look at the help file?\r\n\r\n\r\nrpart\r\n\r\n\r\nR Documentation\r\n\r\n\r\nRecursive Partitioning and Regression Trees\r\n\r\n\r\nDescription\r\n\r\n\r\nFit a rpart model\r\n\r\n\r\nUsage\r\n\r\n\r\nrpart(formula, data, weights, subset, na.action = na.rpart, method,\r\n      model = FALSE, x = FALSE, y = TRUE, parms, control, cost, ...)\r\n\r\n\r\nArguments\r\n\r\n\r\nformula\r\n\r\n\r\n\r\na formula, with a response but no interaction terms. If this a a data frame, that is taken as the model frame (see model.frame).\r\n\r\n\r\n\r\ndata\r\n\r\n\r\n\r\nan optional data frame in which to interpret the variables named in the formula.\r\n\r\n\r\n\r\nweights\r\n\r\n\r\n\r\noptional case weights.\r\n\r\n\r\n\r\nsubset\r\n\r\n\r\n\r\noptional expression saying that only a subset of the rows of the data should be used in the fit.\r\n\r\n\r\n\r\nna.action\r\n\r\n\r\n\r\nthe default action deletes all observations for which y is missing, but keeps those in which one or more predictors are missing.\r\n\r\n\r\n\r\nmethod\r\n\r\n\r\n\r\none of “anova”, “poisson”, “class” or “exp”. If method is missing then the routine tries to make an intelligent guess. If y is a survival object, then method = “exp” is assumed, if y has 2 columns then method = “poisson” is assumed, if y is a factor then method = “class” is assumed, otherwise method = “anova” is assumed. It is wisest to specify the method directly, especially as more criteria may added to the function in future.\r\n\r\n\r\nAlternatively, method can be a list of functions named init, split and eval. Examples are given in the file ‘tests/usersplits.R’ in the sources, and in the vignettes ‘User Written Split Functions’.\r\n\r\n\r\n\r\nmodel\r\n\r\n\r\n\r\nif logical: keep a copy of the model frame in the result? If the input value for model is a model frame (likely from an earlier call to the rpart function), then this frame is used rather than constructing new data.\r\n\r\n\r\n\r\nx\r\n\r\n\r\n\r\nkeep a copy of the x matrix in the result.\r\n\r\n\r\n\r\ny\r\n\r\n\r\n\r\nkeep a copy of the dependent variable in the result. If missing and model is supplied this defaults to FALSE.\r\n\r\n\r\n\r\nparms\r\n\r\n\r\n\r\noptional parameters for the splitting function. Anova splitting has no parameters. Poisson splitting has a single parameter, the coefficient of variation of the prior distribution on the rates. The default value is 1. Exponential splitting has the same parameter as Poisson. For classification splitting, the list can contain any of: the vector of prior probabilities (component prior), the loss matrix (component loss) or the splitting index (component split). The priors must be positive and sum to 1. The loss matrix must have zeros on the diagonal and positive off-diagonal elements. The splitting index can be gini or information. The default priors are proportional to the data counts, the losses default to 1, and the split defaults to gini.\r\n\r\n\r\n\r\ncontrol\r\n\r\n\r\n\r\na list of options that control details of the rpart algorithm. See rpart.control.\r\n\r\n\r\n\r\ncost\r\n\r\n\r\n\r\na vector of non-negative costs, one for each variable in the model. Defaults to one for all variables. These are scalings to be applied when considering splits, so the improvement on splitting on a variable is divided by its cost in deciding which split to choose.\r\n\r\n\r\n\r\n…\r\n\r\n\r\n\r\narguments to rpart.control may also be specified in the call to rpart. They are checked against the list of valid arguments.\r\n\r\n\r\n\r\nDetails\r\n\r\n\r\nThis differs from the tree function in S mainly in its handling of surrogate variables. In most details it follows Breiman et. al (1984) quite closely. R package tree provides a re-implementation of tree.\r\n\r\n\r\nValue\r\n\r\n\r\nAn object of class rpart. See rpart.object.\r\n\r\n\r\nReferences\r\n\r\n\r\nBreiman L., Friedman J. H., Olshen R. A., and Stone, C. J. (1984) Classification and Regression Trees. Wadsworth.\r\n\r\n\r\nSee Also\r\n\r\n\r\nrpart.control, rpart.object, summary.rpart, print.rpart\r\n\r\n\r\nExamples\r\n\r\n\r\nfit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)\r\nfit2 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,\r\n              parms = list(prior = c(.65,.35), split = \"information\"))\r\nfit3 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,\r\n              control = rpart.control(cp = 0.05))\r\npar(mfrow = c(1,2), xpd = NA) # otherwise on some devices the text is clipped\r\nplot(fit)\r\ntext(fit, use.n = TRUE)\r\nplot(fit2)\r\ntext(fit2, use.n = TRUE)\r\n\r\n\r\nThe help file reveals several places where the algorithm can be tuned. Among them is a reference to an argument control, which is a list of options that control the detail of the algorithm. We can examine the parameters of the list:\r\n\r\n\r\nrpart.control\r\n\r\n\r\nR Documentation\r\n\r\n\r\nControl for Rpart Fits\r\n\r\n\r\nDescription\r\n\r\n\r\nVarious parameters that control aspects of the rpart fit.\r\n\r\n\r\nUsage\r\n\r\n\r\nrpart.control(minsplit = 20, minbucket = round(minsplit/3), cp = 0.01, \r\n              maxcompete = 4, maxsurrogate = 5, usesurrogate = 2, xval = 10,\r\n              surrogatestyle = 0, maxdepth = 30, ...)\r\n\r\n\r\nArguments\r\n\r\n\r\nminsplit\r\n\r\n\r\n\r\nthe minimum number of observations that must exist in a node in order for a split to be attempted.\r\n\r\n\r\n\r\nminbucket\r\n\r\n\r\n\r\nthe minimum number of observations in any terminal <leaf> node. If only one of minbucket or minsplit is specified, the code either sets minsplit to minbucket*3 or minbucket to minsplit/3, as appropriate.\r\n\r\n\r\n\r\ncp\r\n\r\n\r\n\r\ncomplexity parameter. Any split that does not decrease the overall lack of fit by a factor of cp is not attempted. For instance, with anova splitting, this means that the overall R-squared must increase by cp at each step. The main role of this parameter is to save computing time by pruning off splits that are obviously not worthwhile. Essentially,the user informs the program that any split which does not improve the fit by cp will likely be pruned off by cross-validation, and that hence the program need not pursue it.\r\n\r\n\r\n\r\nmaxcompete\r\n\r\n\r\n\r\nthe number of competitor splits retained in the output. It is useful to know not just which split was chosen, but which variable came in second, third, etc.\r\n\r\n\r\n\r\nmaxsurrogate\r\n\r\n\r\n\r\nthe number of surrogate splits retained in the output. If this is set to zero the compute time will be reduced, since approximately half of the computational time (other than setup) is used in the search for surrogate splits.\r\n\r\n\r\n\r\nusesurrogate\r\n\r\n\r\n\r\nhow to use surrogates in the splitting process. 0 means display only; an observation with a missing value for the primary split rule is not sent further down the tree. 1 means use surrogates, in order, to split subjects missing the primary variable; if all surrogates are missing the observation is not split. For value 2 ,if all surrogates are missing, then send the observation in the majority direction. A value of 0 corresponds to the action of tree, and 2 to the recommendations of Breiman et.al (1984).\r\n\r\n\r\n\r\nxval\r\n\r\n\r\n\r\nnumber of cross-validations.\r\n\r\n\r\n\r\nsurrogatestyle\r\n\r\n\r\n\r\ncontrols the selection of a best surrogate. If set to 0 (default) the program uses the total number of correct classification for a potential surrogate variable, if set to 1 it uses the percent correct, calculated over the non-missing values of the surrogate. The first option more severely penalizes covariates with a large number of missing values.\r\n\r\n\r\n\r\nmaxdepth\r\n\r\n\r\n\r\nSet the maximum depth of any node of the final tree, with the root node counted as depth 0. Values greater than 30 rpart will give nonsense results on 32-bit machines.\r\n\r\n\r\n\r\n…\r\n\r\n\r\n\r\nmop up other arguments.\r\n\r\n\r\n\r\nValue\r\n\r\n\r\nA list containing the options.\r\n\r\n\r\nSee Also\r\n\r\n\r\nrpart\r\n\r\n\r\nWe can see a few tuning parameters that stand out - minsplit, minbucket, cp, and xval, which are initiatlized to specific values. The user has control of the algorithm by setting these values.\r\nPrediction Error\r\nThe tuning parameters in general should be set to maximize the performance of the model. But what is performance?\r\nSuppose we make a prediction \\(\\hat{Y}\\) and the realized outcome is \\(Y\\), where in general we should not expect perfect prediction and hence \\(\\hat{Y} \\neq Y\\). There is a loss \\(L(Y,\\hat{Y})\\) incurred from missing the target. Common loss functions are\r\n\\[\r\nL(\\hat{Y}, Y) = \r\n\\begin{cases}\r\n(Y-\\hat{Y})^2 \\mbox{ for regression}\\\\\r\n\\mathbf{1}(Y \\neq \\hat{Y}) \\mbox{ for classification}\r\n\\end{cases}\r\n\\]\r\nGiven the loss function, what is the predictive performance of the predictor \\(\\hat{m}\\).\r\nIf the goal is to use the predictor to predict in the population that has yet to be observed, then the natural performance criterion is the average loss in the population\r\n\\[\r\nErr_{D} = E_{Y^{0}, X^{0}} \\left[L(Y^{0}, \\hat{m}(X^{0})) \\mid D \\right]\r\n\\] where the expectation is taken with respect to the randomness in \\((Y^{0}, X^{0}) \\sim F_{Y,X}\\). This is the test error or generalization error, e.g., the average error we would expect in an independent test sample. Notice that the training sample \\(D\\) is conditioned out in the assesment of performance under \\(Err_{D}\\)\r\nAlthough \\(Err_{D}\\) is the ideal performance measure, it is challenging to analyze or forecast. However if we could measure it, then this provides a path to tuning. Notice that \\(Err_{D} = Err_{D}(\\eta)\\), and hence optimal tuning would amount to\r\n\\[\r\n\\hat{\\eta} = \\arg \\max_{\\eta} Err_{D}(\\eta)\r\n\\] Thus \\(Err_{D}(\\eta)\\) would serve two distinct purposes (ESL p 222)\r\n Model tuning : estimating the performance of different algorithmic models indexed by \\(\\eta\\) in order to choose the best one.\r\n Model assessment : having chosen a final model, estimating its prediction error (generalization error) on new data.\r\nIn an ideal circumstance to carry out these calculations we would have a sample of data broken into three parts.\r\nTraining Set\r\nValidation Set\r\nTest Set\r\n\r\n\r\n\r\nThe training set would be used to fit the data \\(\\hat{f}(\\eta)\\). The validation set could be used to tune the algorithm’s \\(\\eta\\) based on average loss in the validation set. And then the test set would provide a clean assesment of the test error of the tuned model at $.\r\nWe typically will not have enough data for this rather clean experiment without seriously compromising the size of the training sample (which detracts from the algorithm’s performance).\r\nInstead we will need to live in a second best world and consider a slightly augmented measure of performance, the average test error, where we also account for randomness in the training sample itself\r\n\\[\r\nErr(\\eta) = E_D\\left[Err_{D}\\right(\\eta)]\r\n\\] If we imagine ordering \\(\\eta\\) such that lower values of \\(eta\\) generate simpler fitted models, and higher values of \\(\\eta\\) generate more complex fitted models, then the behavior of \\(Err(\\eta)\\) creates the canonical picture of Bias Variance Tradeoff (ESL p. 220)\r\n\r\n\r\n\r\nOptimism\r\nLet the training sample be $ D = {(y_i,x_i)}_{i=1}^{n}$\r\nConsider a fitted model \\(\\hat{y}_{i}=\\hat{m}\\left(x_{i}\\right)\\), which can come from any algorithmic model \\(m\\), and implicitly depends on the tuning parameter \\(\\eta\\).\r\nFor simplicity consider a regression problem with squared error loss (the analysis below generalizes to many loss functions)\r\nThe in-sample training error is \\[\r\n\\overline{err}=\\frac{1}{n}\\sum\\left(y_{i}-\\hat{y}_{i}\\right)^{2}\r\n\\]\r\nWe have a general understanding that the \\(\\overline{err}\\) is an optimistic assessment of the object of interest, namely the test error \\(Err_{D}\\). Can we formalize the relationship to gauge just how optimistic?\r\nOne source of the discrepancy is that the test experiment is evaluated at potentially different points of the explanatory variables as compared to the training simple. To eliminate this additional variability, it is useful to consider the in-sample test error \\[\r\nErr_{\\mbox{in}} = \\frac{1}{n} \\sum E_{Y^{0}}\\left[L(Y_{i}^{0}, \\hat{m}(x_{i}) \\mid D \\right]\r\n\\]\r\nOptimism can be defined as\r\n\\[\r\n\\mbox{opp} \\equiv Err_{\\mbox{in}} - \\overline{err}\r\n\\]\r\nIt turns out there is a natural characterization of the expected optimism, or \\[\r\n\\omega = E_{\\mathbf{y}}[\\mbox{opp}]\r\n\\] Where the expectation is taken with respect to the training points \\(\\mathbf{y} = (y_i)_{i=1}^{n}\\)\r\n\r\n\\(\\omega = \\frac{2}{n}\\sum_{i}\\mbox{Cov}(y_{i}, \\hat{y}_i)\\)\r\n\r\n\r\nThe interpretation, to quote ESL\r\n\r\nThus the amount by which \\(\\overline{err}\\) underestimates the true error depends on how strongly \\(y_{i}\\) affects its own prediction. The harder we fit the data, the greater \\(Cov(\\hat{y}_i, y_i)\\) will be, thereby increasing the optimism.\r\n\r\nThe proof of this result is remarkably straightforward.\r\nFor ease of notation, let the new test data generated from the same points for the explanatory variables as the training set be denoted simply as \\(y_{i}^{\\prime} = Y_{i}^{0}\\)\r\nThe prediction error is then \\[\r\n\\frac{1}{n}\\sum\\left(y_{i}^{\\prime}-\\hat{y}_{i}\\right)^{2}\r\n\\]\r\nObserve that the \\(\\hat{y}_{i}'s\\) are functions of all the \\(y_{i}'s\\) and so are dependent random variables.\r\nHowever \\(y_{i}^{\\prime}\\) is independent of \\(\\hat{y}_{i}\\).\r\nRecall the formula\r\n\\[V\\left(Z\\right)=E\\left[Z^{2}\\right]-E\\left[Z\\right]^{2}\\implies E\\left[Z^{2}\\right]=V\\left[Z\\right]+E\\left[Z\\right]^{2}\\]\r\nThen \\[\\begin{align*}\r\nE\\left[\\left(y_{i}-\\hat{y}_{i}\\right)^{2}\\right] & =V\\left[y_{i}-\\hat{y}_{i}\\right]+E\\left[y_{i}-\\hat{y}_{i}\\right]^{2}\\\\\r\n & =V\\left[y_{i}\\right]+V\\left[\\hat{y}_{i}\\right]-2Cov\\left[y_{i},\\hat{y}_{i}\\right]+\\left(E\\left[y_{i}\\right]-E\\left[\\hat{y}_{i}\\right]\\right)^{2}\r\n\\end{align*}\\]\r\nObserve on the other hand that using the fact \\(E\\left[y_{i}\\right]=E\\left[y_{i}^{\\prime}\\right]\\) and \\(V\\left[y_{i}^{\\prime}\\right]=V\\left[y_{i}\\right]\\)\r\n\\[\\begin{align*}\r\nE\\left[\\left(y_{i}^{\\prime}-\\hat{y}_{i}\\right)^{2}\\right] & =V\\left[y_{i}^{\\prime}\\right]+V\\left[\\hat{y}_{i}\\right]-2Cov\\left[y_{i}^{\\prime},\\hat{y}_{i}\\right]+\\left(E\\left[y_{i}^{\\prime}\\right]-E\\left[\\hat{y}_{i}\\right]\\right)^{2}\\\\\r\n & =V\\left[y_{i}\\right]+V\\left[\\hat{y}_{i}\\right]+\\left(E\\left[y_{i}\\right]-E\\left[\\hat{y}_{i}\\right]\\right)^{2}\r\n\\end{align*}\\]\r\nHence we have the relationship that \\[\r\nE\\left[\\left(y_{i}^{\\prime}-\\hat{y}_{i}\\right)^{2}\\right]=E\\left[\\left(y_{i}-\\hat{y}_{i}\\right)^{2}\\right]+2Cov\\left[y_{i},\\hat{y}_{i}\\right].\r\n\\]\r\nAveraging over data points \\[\r\nE\\left[\\frac{1}{n}\\sum_{i=1}^{n}\\left(y_{i}^{\\prime}-\\hat{y}_{i}\\right)^{2}\\right]=E\\left[\\frac{1}{n}\\sum_{i=1}^{n}\\left(y_{i}-\\hat{y}_{i}\\right)^{2}\\right]+\\frac{2}{n}\\sum_{i}Cov\\left(y_{i},\\hat{y}_{i}\\right).\r\n\\]\r\nWe can frame the result in a slightly different way for the specialized case where the true DGP is\r\n\\[\r\ny_{i} = m(x_i)+\\epsilon_i\r\n\\] For a homoskedastic \\(\\epsilon_i\\) with variance \\(\\sigma^2\\).\r\nLet us define the degrees of freedom \\(df\\left(\\hat{y}\\right)\\) of the fitted model \\(\\hat{y}\\) as \\[\r\ndf\\left(\\hat{y}\\right)=\\frac{1}{\\sigma^{2}}\\sum Cov\\left(y_{i},\\hat{y}_{i}\\right),\r\n\\]\r\nThen the relationship becomes \\[\r\nE\\left[\\left(y_{i}^{\\prime}-\\hat{y}_{i}\\right)^{2}\\right]=E\\left[\\left(y_{i}-\\hat{y}_{i}\\right)^{2}\\right]+\\frac{2\\sigma^{2}}{n}df\\left(\\hat{y}\\right)\r\n\\] which is words says that the expected test error is exactly the expected training error plus a constant factor \\(\\left(\\frac{2\\sigma^{2}}{n}\\right)\\) times the degree of freedom.\r\nThis gives us an approach to model selection. Suppose we have a family of fitted values \\(\\hat{y}_{\\eta}\\) which depends on a tuning parameter.\r\nThen we can estimate \\[\r\nErr_{\\mbox{in}}(\\eta) =\\frac{1}{n}\\sum_{i=1}^{n}\\left(y_{i}-\\left(\\hat{y}_{\\eta}\\right)_{i}\\right)^{2}+\\frac{2\\sigma^{2}}{n}df\\left(\\hat{y}_{\\eta}\\right)\r\n\\] replacing \\(\\sigma^{2}\\) and \\(df\\) with estimates if needed.\r\nThen we can select \\[\r\n\\hat{\\eta}=\\arg\\min_{\\eta\\in\\Theta}\\frac{1}{n}\\left(y_{i}-\\left(\\hat{y}_{\\eta}\\right)_{i}\\right)^{2}+\\frac{2\\sigma^{2}}{n}df\\left(\\hat{y}_{\\eta}\\right)\r\n\\]\r\nObserve that for a linear regression model this becomes \\[\\begin{align*}\r\ndf\\left(\\hat{y}^{linreg}\\right) & =\\\\\r\n\\frac{1}{\\sigma^{2}}Tr\\left(Cov\\left(X\\left(X^{\\prime}X\\right)^{-1}X^{\\prime}Y\\right),Y\\right) & =\\\\\r\n\\frac{1}{\\sigma^{2}}Tr\\left(X\\left(X^{\\prime}X\\right)^{-1}X^{\\prime}V\\left[Y\\right]\\right) & =\\\\\r\nTr\\left(X\\left(X^{\\prime}X\\right)^{-1}X^{\\prime}\\right) & =\\\\\r\nTr\\left(X^{\\prime}X\\left(X^{\\prime}X\\right)^{-1}\\right) & =p\r\n\\end{align*}\\]\r\nThe optimism term \\(\\frac{2}{n}\\sigma^{2}\\left(p\\right)\\) depends on 3 key factors\r\nGrows with \\(\\sigma^{2}\\): more noise gives the model more opportunities to seem to fit well by capitalizing on chance.\r\nShrinks with \\(n\\): more data at any noise level makes it harder to pretend the fit is better than it is in reality.\r\nGrows with \\(p\\): every extra parameter is another control which can adjust to fit the noise.\r\n\r\nHence model selection on the number of predictors becomes \\[\r\n\\hat{k}=\\arg\\min_{k\\in\\left\\{ 1,\\dots,p\\right\\} }\\frac{1}{n}\\sum\\left(y_{i}-\\left(\\hat{y}_{k}\\right)_{i}\\right)^{2}+\\frac{2\\sigma^{2}}{n}k\r\n\\] which gives Mallow’s \\(C_{p}\\) criterion for choice among linear models.\r\nCross-Validation\r\nAn alternative approach to estimating the expected test error \\(Err\\) associated with an ML technique \\(\\hat{m}\\) is cross validation.\r\nLet the fitted value under a given ML technique class be \\(\\hat{y}_{\\eta}\\) for model tuning parameter \\(\\eta\\in\\Theta\\)\r\nGenerally \\(\\eta\\) is ordered such that larger or smaller values are associated with a higher degree of regularization in the method. We wish to select the value \\(\\eta^{\\ast}\\) that minimizes \\(Err\\).\r\nCross validation is a resampling technique that allows us to statistically approximate \\(Err\\)\r\nSplit the training set randomly into \\(K\\) divisions or folds for some number \\(K\\). Express the folds as \\(F_{1},\\dots,F_{K}\\) where \\[F_{1}\\cup \\dots \\cup F_{K}= \\{ 1,\\dots,n\\} \\] with \\(n_{k}=\\left|F_{k}\\right|\\) points in fold \\(k\\).\r\nFor each \\(k=1,\\dots,K\\), we fit our model to all points besides the \\(k^{th}\\) fold, and let the \\(i^{th}\\) fitted values be denotes \\(\\hat{m}_{\\eta}^{-k}\\left(x_{i}\\right)\\).\r\nWe then evaluate the error on the points in the \\(k^{th}\\) fold \\[\r\nCV_{k}\\left(\\eta\\right)=\\frac{1}{n_{k}}\\sum_{i\\in F_{k}}\\left(y_{i}-\\hat{m}_{\\eta}^{-k}\\left(x_{i}\\right)\\right)^{2}\r\n\\]\r\nWe then average over the folds to estimate prediction error \\[\r\nCV\\left(\\eta\\right)=\\frac{1}{K}CV_{k}\\left(\\eta\\right)\r\n\\]\r\nThe process can be depicted as\r\n\r\n\r\n\r\nThis is \\(K\\)-fold cross validation, and the tuning procedure becomes \\[\r\n\\hat{\\eta}=\\arg\\min_{\\eta\\in\\left\\{ \\eta_{1},\\dots,\\eta_{m}\\right\\} }CV\\left(\\eta\\right)\r\n\\]\r\nThis leaves open the choice of \\(K\\).\r\nFor \\(K=2\\) we have split sample cross-validation. The problem is that the CV error estimate will be biased upwards.\r\nFor \\(K=n\\) we have leave-one-out cross validation. The problem is that the CV error estimate will have high variance.\r\nA standard to balance this bias-variance tradeoff is setting \\(K=5\\) or \\(K=10\\), where each iteration we train on a fraction of about \\(\\frac{K-1}{K}\\) of the total training set so we reduce bias, and there is less overlap among training set, thus reducing bias.\r\nRecognizing there is some variance in the CV error estimate, the one standard error rule is an alternative to choice of \\(\\eta\\). Let \\[\r\nSD\\left(\\eta\\right)=\\sqrt{var\\left(CV_{1}\\left(\\eta\\right),\\dots,CV_{K}\\left(\\eta\\right)\\right)}\r\n\\] and \\[\r\nSE\\left(\\eta\\right)=\\frac{SD\\left(\\eta\\right)}{\\sqrt{K}}\r\n\\] is standard error estimate of \\(CV\\left(\\eta\\right).\\)\r\nThe one standard error rule is to move \\(\\eta\\) in the direction of increasing regularization until it ceases to be true that \\[\r\nCV\\left(\\eta\\right)\\leq CV\\left(\\hat{\\eta}\\right)+SE\\left(\\hat{\\eta}\\right)\r\n\\] e.g., we take the most simplest model whose error is within one standard error of the minimal error.\r\nSee the interesting discussion on the proper application of CV at the top of page 245.\r\nLet us now revisit the Ames, Iowa data to see if multidimensional tuning would play a role.\r\n\r\n\r\nlibrary(rsample)     # data splitting \r\nlibrary(dplyr)       # data wrangling\r\nlibrary(rpart)       # performing regression trees\r\nlibrary(rpart.plot)  # plotting regression trees\r\n\r\n\r\n\r\nCreate training and test samples.\r\n\r\n\r\n# Create training (70%) and test (30%) sets for the AmesHousing::make_ames() data.\r\n# Use set.seed for reproducibility\r\n\r\nset.seed(123)\r\names_split <- initial_split(AmesHousing::make_ames(), prop = .7)\r\names_train <- training(ames_split)\r\names_test  <- testing(ames_split)\r\n\r\n\r\n\r\nSetup a grid for the tuning parameters\r\n\r\n\r\nhyper_grid <- expand.grid(\r\n  minsplit = seq(5, 20, 1),\r\n  maxdepth = seq(8, 15, 1)\r\n)\r\n\r\nhead(hyper_grid)\r\n\r\n\r\n  minsplit maxdepth\r\n1        5        8\r\n2        6        8\r\n3        7        8\r\n4        8        8\r\n5        9        8\r\n6       10        8\r\n\r\nUse CART for each tuning parameter value in the grid.\r\n\r\n\r\nmodels <- list()\r\n\r\nfor (i in 1:nrow(hyper_grid)) {\r\n  \r\n  # get minsplit, maxdepth values at row i\r\n  minsplit <- hyper_grid$minsplit[i]\r\n  maxdepth <- hyper_grid$maxdepth[i]\r\n\r\n  # train a model and store in the list\r\n  models[[i]] <- rpart(\r\n    formula = Sale_Price ~ .,\r\n    data    = ames_train,\r\n    method  = \"anova\",\r\n    control = list(minsplit = minsplit, maxdepth = maxdepth)\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n# function to get optimal cp\r\nget_cp <- function(x) {\r\n  min    <- which.min(x$cptable[, \"xerror\"])\r\n  cp <- x$cptable[min, \"CP\"] \r\n}\r\n\r\n# function to get minimum error\r\nget_min_error <- function(x) {\r\n  min    <- which.min(x$cptable[, \"xerror\"])\r\n  xerror <- x$cptable[min, \"xerror\"] \r\n}\r\n\r\nhyper_grid %>%\r\n  mutate(\r\n    cp    = purrr::map_dbl(models, get_cp),\r\n    error = purrr::map_dbl(models, get_min_error)\r\n    ) %>%\r\n  arrange(error) %>%\r\n  top_n(-5, wt = error)\r\n\r\n\r\n  minsplit maxdepth         cp     error\r\n1       19       12 0.01060346 0.2628987\r\n2        5        8 0.01000000 0.2635207\r\n3        9       11 0.01000000 0.2645615\r\n4       14       11 0.01000000 0.2650862\r\n5       13       10 0.01000000 0.2655860\r\n\r\nExtract the tree for the optimal value of the tuning parameters.\r\n\r\n\r\noptimal_tree <- rpart(\r\n    formula = Sale_Price ~ .,\r\n    data    = ames_train,\r\n    method  = \"anova\",\r\n    control = list(minsplit = 17, maxdepth = 12, cp = 0.01)\r\n    )\r\n\r\n\r\n\r\nThe new test error\r\n\r\n\r\npred <- predict(optimal_tree, newdata = ames_test)\r\np_error <- Metrics::rmse(actual = ames_test$Sale_Price, predicted = pred)\r\np_error\r\n\r\n\r\n[1] 39852.01\r\n\r\n\r\n\r\n\r\n",
    "preview": "https://i0.wp.com/blog.rankone.io/wp-content/uploads/2018/11/accuracy1.png?fit=1801%2C901&ssl=1",
    "last_modified": "2021-02-08T05:52:38+08:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "A First Look at Algorithmic Modeling : Regression Trees",
    "description": "An example of a regression tree in action",
    "author": [
      {
        "name": "Amit Gandhi",
        "url": {}
      }
    ],
    "date": "2021-01-28",
    "categories": [],
    "contents": "\r\n\r\nContents\r\n\r\n\r\nAlgorithmic models begin with an ``expressive space’’ for representing the non-parametric primitive of interest (see previous post for the 3 main classes of non-parametric primitives). In the case of supervised learning, we seek a space to represent the conditional mean of \\(Y\\) given \\(X\\), which is the theoretically optimal predictor of \\(Y\\) from \\(X\\) under squared error loss\r\nThe algorithms themselves are concerned with finding a particular representation in the expressive space to fit the data at hand. The behavior of the algorithm for conducting this search is governed by a set of tuning parameters \\(\\eta\\). The process of finding the optimal tuning parameters is called (rather simply) tuning,\r\nDecision Trees\r\nThe general idea of prediction/decision trees is that we will partition the predictor space into a number of simple, rectangular regions.\r\nIn order to make a prediction for a given observation, we typically use the mean of the training data in the region to which it belongs.\r\nRectangles can be achieved by making successive binary splits on the predictors variables \\(X_1,\\ldots X_p\\). i.e., we choose a variable \\(X_j\\), \\(j=1,\\ldots p\\), and  divide  up the feature space according to \\[X_j \\leq c \\;\\;\\;\\text{and}\\;\\;\\; X_j > c\\] Then we proceed on each half\r\nThe splitting rules can be summarized visually as a tree, these approaches are called decision tree methods.\r\n\r\nConstructing a partitioned space from a decision tree\r\n\r\n\r\n\r\n\r\nThese methods are both simple and useful for interpretation.\r\nNote however that not every partition of the predictor space can be represented as a tree\r\n\r\n\r\n\r\nHow to use trees?\r\nFor an observation falling in region \\(R_{j}\\), we predict a value for the the outcome \\(Y\\) as \\(c_{j}\\)\r\nThe estimated regression function has the form \\[\\hat{f}^\\mathrm{tree}(x) \\;=\\; \\sum_{j=1}^m c_j \\cdot 1\\{x \\in R_j\\}\r\n\\;=\\; c_j \\;\\, \\mathrm{such}\\;\\mathrm{that}\\;\\, x \\in R_j\\]\r\nIn the case of a regression problem, the \\(c_j\\) are real numbers. How would we choose these? Simple: just take the average response of all of the points in the region. Note that each region \\(R_j\\) contains some subset of the training data \\((x_i,y_i)\\), \\(i=1,\\ldots n\\), say, \\(n_j\\) points. Thus \\[c_j = \\frac{1}{n_j} \\sum_{x_i \\in R_j} y_i\\]\r\nIn the case of a classification problem, the prediction is a class \\(c_{j} \\in \\{1,\\dots,K\\}\\) The predicted class \\(c_j\\) is just most common occuring class among these points.\r\nIn particular, for each class \\(k=1,\\ldots K\\), we can estimate the probability that the class label is \\(k\\) given that the feature vector lies in region \\(R_j\\), \\(\\mathrm{P}(C=k|X\\in R_j)\\), by \\[\\hat{p}_k (R_j) = \\frac{1}{n_j}\\sum_{x_i \\in R_j} 1\\{y_i = k\\}\\] the  proportion of points  in the region that are of class \\(k\\).\r\nWe can now express the predicted class as \\[c_j = \\mathop{\\mathrm{argmax}}_{k=1,\\ldots K} \\; \\hat{p}_k (R_j)\\]\r\nPrediction of baseball player’s salary\r\nSuppose we wish predict a baseball player’s Salary based on Years (the number of years that he has played in the major leagues) and Hits (the number of hits that he made in the previous year).\r\nSalary is measured in thousands of dollars.\r\n Prediction of baseball player’s salary \r\nFigure 1\r\n\r\n\r\n\r\nThe regression tree depicts the prediction of the log salary of a baseball player, based on the number of years that he has played in the major leagues and the number of hits that he made in the previous year. At a given internal node, the label (of the form \\(X_j < t_k\\)) indicates the left-hand branch resulting from that split, and the right-hand branch corresponds to \\(X_j \\geq t_k.\\)\r\nThe tree represents a series of splits starting at the top of the tree.\r\nThe top split assigns observations having \\(Years < 4.5\\) to the left branch.\r\nThe predicted salary for these players is given by the mean response value for the players in the data set with \\(Years < 4.5.\\)\r\nFor such players, the mean log salary is 5.107, and so we make a prediction of \\(e^{5.107}\\) thousands of dollars, i.e. \\(165,174\\)\r\nAnother way to see the result of the tree is through the rectangular partition of the predictor space.\r\nFigure 2\r\n\r\n\r\n\r\nWe can write these regions as the following:\r\n\\(R_1 ={X \\mid Years < 4.5}\\)\r\n\\(R_2 ={X \\mid Years \\geq 4.5, Hits < 117.5}\\)\r\n\\(R_3 = {X \\mid Years \\geq 4.5, Hits \\geq 117.5}.\\)\r\n\r\nNotice the powerful appeal of interpretability of the resulting tree - even without a deep domain understanding of baseball, there is an intuitive sense that emerges for how baseball salaries work.\r\nTerminology\r\nIn keeping with the tree analogy, the regions \\(R_1\\), \\(R_2\\), …, \\(R_{J}\\) are known as terminal nodes or leaves of the tree.\r\nThe points along the tree where the predictor space is split are referred to as internal nodes.\r\nIn Figure 1, the two internal nodes are indicated by the text \\(Years<4.5\\) and \\(Hits<117.5.\\)\r\nWe refer to the segments of the trees that connect the nodes as branches\r\nHow to build trees?\r\nThere are two main issues to consider in building a tree:\r\nHow to choose the splits?\r\nHow big to grow the tree?\r\n\r\nThink first about varying the depth of the tree …\r\nWhich is more complex - a big tree or a small tree?\r\nWhat  tradeoff  is at play here?\r\nHow might we eventually consider choosing the depth?\r\n\r\nNow for a fixed depth, consider choosing the splits. -If the tree has depth \\(d\\), then it has \\(\\approx 2^d\\) nodes.\r\nAt each node we could choose any of \\(p\\) the variables for the split\r\nThis means that the number of possibilities is \\[p \\cdot 2^d\\]\r\nThis is  huge  even for moderate \\(d\\)! And we haven’t even counted the actual split points themselves\r\n\r\nThe CART Algorithm\r\nThe  CART algorithm 1 chooses the splits in a top down fashion: then chooses the first variable to at the root, then the variables at the second level, etc.\r\nAt each node \\(t\\) encountered along the algorithm (starting with the root node), we have a measure of node impurity \\(Q_{t} = Q(D_{t})\\), which is a function of the data set \\(D_{t}\\) arriving at node \\(t\\). Let \\(c_{t}\\) be the predicted value for node \\(t\\).\r\nFor regression trees, a common impurity measure is the variance \\[\\frac{1}{N_{t}} \\sum_{i=1}^{N_{t}} (y_{i,t} - \\bar{y}_t)^{2}\\]\r\nFor classification trees, a common impurity measure is the mis-classification rate \\[1 - \\hat{p}_{c_{t}}\\] where \\(c_{t}\\) is the predicted class for node \\(t\\).\r\nAlternatives to misclassification error for classification trees are the Gini index or cross-entropy.\r\n\r\nAt node \\(t\\) we must determine the optimal split \\((j,s)\\) where \\(j\\) indexes the predictor variable \\(X_{j}\\) we split and \\(s\\) the split point. Let \\(D_{left}\\) and \\(D_{right}\\) be the induced data sets going to the left and right nodes from the split \\((j,s)\\), with number of observations \\(N_{left}\\) and \\(N_{right}\\) respectively.\r\nAt each step of the CART algorithm we seek to maximize the information gain \\(IG\\) of the split as measured by \\[IG(D,j, s) = Q(D) - \\frac{N_{left}}{N} Q(D_{left}) - \\frac{N_{right}}{N} Q(D_{right})\\] where \\(D\\) is the dataset of the parent node.\r\nThe CART algorithm greedily chooses the split to minimize \\[N_{left} Q(D_{left}) + N_{right} Q(D_{right})\\]\r\nHaving done this, we now recursively repeat the process for each new node arising from the split, treating \\(D_{left}\\) and \\(D_{right}\\) as parent data sets.\r\nHow do we find the best split \\(s\\)? Aren’t there  infinitely many  to consider? No, to split at node \\(t\\) on a variable \\(j\\), we really only need to consider \\(N_t\\) splits (or \\(N_t-1\\) splits)\r\n\r\n\r\n\r\n\r\nWhen does the process stop? stopping We stop only when each terminal node has fewer than some minimum number of observations (e.g., 10 observations).\r\nPruning the tree\r\nContinuing on in this manner, we will get a big tree \\(T_0\\). Let the size \\(\\tilde{T}_{0} = |T_{0}|\\) be denoted by the number of leaf nodes.\r\nA natural concern with CART is overfitting - we have grown the tree to large.\r\nWe then  prune  this tree, meaning that we collapse some of its leaves into the parent nodes.\r\nNotice that the total information gain from building the tree is \\[Q(D) - \\sum_{t}^{T} \\frac{N_{t}}{N}Q(D_t)\\] where \\(D\\) is the data entering the root node (e.g., the full training sample)\r\nWe seek to find the subtree \\(T \\subset T_{0}\\) to minimize the cost complexity criterion \\[C_{\\alpha}(T) = \\sum_{t=1}^{|T|} N_{t}Q_t + \\alpha |T|\\]\r\nWhat is the logic of this approach? That is, why grow a large tree and prune, instead of just stopping at some point when the information gain ? Because any stopping rule may be  short-sighted , in that a split may look bad but it may lead to a good split below it.\r\n\r\n\r\n\r\n\r\nFor any given \\(\\alpha\\), the optimal pruned tree \\(T(\\alpha)\\) can be found via a convenient algorithm - weakest link pruning.\r\nWhen \\(\\alpha = 0,\\) then the subtree T will simply equal \\(T_0\\), because then the penalized objective just measures the training error.\r\nHowever, as \\(\\alpha = 0\\) increases, there is a price to pay for having a tree with many terminal nodes, and so the penalized objective will be minimized for a smaller sub-tree.\r\nWe start from the full tree \\(T_{0}\\)\r\nFor any internal node \\(t\\),we let \\(T{t}\\) be the branch of \\(T\\) with root \\(t\\) (e.g., the pruned part if we snip the tree at node \\(t\\))\r\nThe cost complexity criterion would become smaller by pruning at \\(t\\) if the following held\r\n\\[ N_{t} Q(D_{t}) + \\alpha  < \\sum _{t^\\prime = 1}^{|T_{t}|} N_{t^\\prime}Q(D_{t^\\prime}) + \\alpha|T_{t}| \\]\r\nIt pays to prune at \\(t\\) if \\[\\alpha > \\frac{N_{t} Q(D_{t}) - \\sum _{t^\\prime = 1}^{|T_{t}|} N_{t^\\prime}Q(D_{t^\\prime})}{|T_{t}| - 1} = g_{0}(t)\\]\r\nObserve that \\(\\alpha\\) is always positive because the numerator of the RHS is a re-scaled version of the information gain from splitting at \\(t\\). this can be done by pruning the weakest leaf one at a time.\r\nDefine the weakest link in \\(T_{0}\\) as the internal node \\(t_{0}\\) such that \\(g_{0}(t_{0}) = \\min g_{0}(t)\\), and let \\(\\alpha_{1} = g_{0}(t_{0})\\)\r\nPrune the tree \\(T_{0} - T_{1}\\) and repeat the weakest link process.\r\nThis gives us a decreasing sequence of trees \\[T_{0} \\prec T_{1} \\dots \\prec t_{root}\\] all the way down to the root node \\(t_{root}\\), as well as an increasing sequence of \\(\\alpha\\) values \\[0 < \\alpha_{1} < \\alpha_{2} < \\dots < \\alpha_{K}\\]\r\nA key result in Breiman et al (1984) is that for \\(\\alpha\\) such that \\(\\alpha_{k} < \\alpha < \\alpha_{k+1}\\), the optimum tree \\(T(\\alpha)\\) is \\(T_{k}\\).\r\n\\(\\alpha\\) is a  tuning parameter , and a larger \\(\\alpha\\) yields a smaller tree.\r\nThus as \\(\\alpha = 0\\) increases from 0, branches are pruned from the tree in a nested and predictable way (resulting in the whole sequence of subtrees as a function of \\(\\alpha\\)).\r\nCART picks from the finite menu of potential \\(\\alpha_{k}\\) by 5- or 10-fold cross-validation\r\nAlgorithm for Building a Regression Tree\r\nUse recursive binary splitting to grow a large tree on the training data, stopping only when each terminal node has fewer than some minimum number of observations.\r\nApply cost complexity pruning to the large tree in order to obtain a sequence of best subtrees, as a function of \\(\\alpha.\\)\r\nUse \\(K\\)-fold cross-validation to choose \\(\\alpha.\\) That is, divide the training observations into \\(K\\) folds. For each \\(k = 1, \\ldots, K\\):\r\nRepeat Steps 1 and 2 on all but the kth fold of the training data.\r\nEvaluate the mean squared prediction error on the data in the left-out kth fold, as a function of \\(\\alpha.\\)\r\nAverage the results for each value of \\(\\alpha\\), and pick \\(\\alpha\\) to minimize the average error.\r\n\r\nReturn the subtree from Step 2 that corresponds to the chosen value of \\(\\alpha.\\)\r\nSome considerations\r\nSplitting a categorical variable predictor variable with many levels can be onerous, e.g., a categorical variable with \\(q\\) levels has \\(2^{q-1} - 1\\) potential splits, and thus need to carefully consider category definitions in using such predictors.\r\nAn Empirical Example: Spam Data\r\n-In an empirical analysis, we will split our data \\(D\\) into a test \\(D_{test}\\) and training \\(D_{train}\\) set.\r\nWe will run the CART algorithm (grow and prune a tree) on \\(D_{train}\\) to extract a prediction tree, and perform predictions on the \\(D_{test}\\)\r\nCross validation is usually done with 5 or 10 folds, and the “one standard error” rule is applied (the simplest model with performance at the min of the CV performance + one standard error)\r\nExample from ESL: \\(n=4601\\) emails, of which 1813 are considered spam. For each email we have \\(p=58\\) attributes. The first 54 measure the frequencies of 54 key words or characters (e.g., “free”, “need”, “$”). The last 3 measure\r\nthe average length of uninterrupted sequences of capitals;\r\nthe length of the longest uninterrupted sequence of capitals;\r\nthe sum of lengths of uninterrupted sequences of capitals\r\n\r\nCross-validation error curve for the spam data (from ESL page 314):\r\n\r\n\r\n\r\nThe blue curve is the 10-fold cross validation estimate of the mis-classification rate with SE bars. The orange curve is the test error, which tracks the CV error closely.\r\nThe min occurs at a tree of size 17 (with one SE rule applied)\r\n\r\n\r\n\r\nRunning CART in R\r\nThe package rpart provides a fast implementation and interface for the CART algorithm and decision trees in R. We consider an example here with the Ames, Iowa Housing Data (sometimes called the new iris data). For a description, see here\r\nWe can first load the data\r\n\r\n\r\nlibrary(rsample)     # data splitting \r\nlibrary(dplyr)       # data wrangling\r\nlibrary(rpart)       # performing regression trees\r\nlibrary(rpart.plot)  # plotting regression trees\r\nlibrary(skimr)\r\n\r\n\r\n\r\nLets skim the data.\r\n\r\nTable 1: Data summary\r\nName\r\nAmesHousing::make_ames()\r\nNumber of rows\r\n2930\r\nNumber of columns\r\n81\r\n_______________________\r\n\r\nColumn type frequency:\r\n\r\nfactor\r\n46\r\nnumeric\r\n35\r\n________________________\r\n\r\nGroup variables\r\nNone\r\nVariable type: factor\r\nskim_variable\r\nn_missing\r\ncomplete_rate\r\nordered\r\nn_unique\r\ntop_counts\r\nMS_SubClass\r\n0\r\n1\r\nFALSE\r\n16\r\nOne: 1079, Two: 575, One: 287, One: 192\r\nMS_Zoning\r\n0\r\n1\r\nFALSE\r\n7\r\nRes: 2273, Res: 462, Flo: 139, Res: 27\r\nStreet\r\n0\r\n1\r\nFALSE\r\n2\r\nPav: 2918, Grv: 12\r\nAlley\r\n0\r\n1\r\nFALSE\r\n3\r\nNo_: 2732, Gra: 120, Pav: 78\r\nLot_Shape\r\n0\r\n1\r\nFALSE\r\n4\r\nReg: 1859, Sli: 979, Mod: 76, Irr: 16\r\nLand_Contour\r\n0\r\n1\r\nFALSE\r\n4\r\nLvl: 2633, HLS: 120, Bnk: 117, Low: 60\r\nUtilities\r\n0\r\n1\r\nFALSE\r\n3\r\nAll: 2927, NoS: 2, NoS: 1\r\nLot_Config\r\n0\r\n1\r\nFALSE\r\n5\r\nIns: 2140, Cor: 511, Cul: 180, FR2: 85\r\nLand_Slope\r\n0\r\n1\r\nFALSE\r\n3\r\nGtl: 2789, Mod: 125, Sev: 16\r\nNeighborhood\r\n0\r\n1\r\nFALSE\r\n28\r\nNor: 443, Col: 267, Old: 239, Edw: 194\r\nCondition_1\r\n0\r\n1\r\nFALSE\r\n9\r\nNor: 2522, Fee: 164, Art: 92, RRA: 50\r\nCondition_2\r\n0\r\n1\r\nFALSE\r\n8\r\nNor: 2900, Fee: 13, Art: 5, Pos: 4\r\nBldg_Type\r\n0\r\n1\r\nFALSE\r\n5\r\nOne: 2425, Twn: 233, Dup: 109, Twn: 101\r\nHouse_Style\r\n0\r\n1\r\nFALSE\r\n8\r\nOne: 1481, Two: 873, One: 314, SLv: 128\r\nOverall_Qual\r\n0\r\n1\r\nFALSE\r\n10\r\nAve: 825, Abo: 732, Goo: 602, Ver: 350\r\nOverall_Cond\r\n0\r\n1\r\nFALSE\r\n9\r\nAve: 1654, Abo: 533, Goo: 390, Ver: 144\r\nRoof_Style\r\n0\r\n1\r\nFALSE\r\n6\r\nGab: 2321, Hip: 551, Gam: 22, Fla: 20\r\nRoof_Matl\r\n0\r\n1\r\nFALSE\r\n8\r\nCom: 2887, Tar: 23, WdS: 9, WdS: 7\r\nExterior_1st\r\n0\r\n1\r\nFALSE\r\n16\r\nVin: 1026, Met: 450, HdB: 442, Wd : 420\r\nExterior_2nd\r\n0\r\n1\r\nFALSE\r\n17\r\nVin: 1015, Met: 447, HdB: 406, Wd : 397\r\nMas_Vnr_Type\r\n0\r\n1\r\nFALSE\r\n5\r\nNon: 1775, Brk: 880, Sto: 249, Brk: 25\r\nExter_Qual\r\n0\r\n1\r\nFALSE\r\n4\r\nTyp: 1799, Goo: 989, Exc: 107, Fai: 35\r\nExter_Cond\r\n0\r\n1\r\nFALSE\r\n5\r\nTyp: 2549, Goo: 299, Fai: 67, Exc: 12\r\nFoundation\r\n0\r\n1\r\nFALSE\r\n6\r\nPCo: 1310, CBl: 1244, Brk: 311, Sla: 49\r\nBsmt_Qual\r\n0\r\n1\r\nFALSE\r\n6\r\nTyp: 1283, Goo: 1219, Exc: 258, Fai: 88\r\nBsmt_Cond\r\n0\r\n1\r\nFALSE\r\n6\r\nTyp: 2616, Goo: 122, Fai: 104, No_: 80\r\nBsmt_Exposure\r\n0\r\n1\r\nFALSE\r\n5\r\nNo: 1906, Av: 418, Gd: 284, Mn: 239\r\nBsmtFin_Type_1\r\n0\r\n1\r\nFALSE\r\n7\r\nGLQ: 859, Unf: 851, ALQ: 429, Rec: 288\r\nBsmtFin_Type_2\r\n0\r\n1\r\nFALSE\r\n7\r\nUnf: 2499, Rec: 106, LwQ: 89, No_: 81\r\nHeating\r\n0\r\n1\r\nFALSE\r\n6\r\nGas: 2885, Gas: 27, Gra: 9, Wal: 6\r\nHeating_QC\r\n0\r\n1\r\nFALSE\r\n5\r\nExc: 1495, Typ: 864, Goo: 476, Fai: 92\r\nCentral_Air\r\n0\r\n1\r\nFALSE\r\n2\r\nY: 2734, N: 196\r\nElectrical\r\n0\r\n1\r\nFALSE\r\n6\r\nSBr: 2682, Fus: 188, Fus: 50, Fus: 8\r\nKitchen_Qual\r\n0\r\n1\r\nFALSE\r\n5\r\nTyp: 1494, Goo: 1160, Exc: 205, Fai: 70\r\nFunctional\r\n0\r\n1\r\nFALSE\r\n8\r\nTyp: 2728, Min: 70, Min: 65, Mod: 35\r\nFireplace_Qu\r\n0\r\n1\r\nFALSE\r\n6\r\nNo_: 1422, Goo: 744, Typ: 600, Fai: 75\r\nGarage_Type\r\n0\r\n1\r\nFALSE\r\n7\r\nAtt: 1731, Det: 782, Bui: 186, No_: 157\r\nGarage_Finish\r\n0\r\n1\r\nFALSE\r\n4\r\nUnf: 1231, RFn: 812, Fin: 728, No_: 159\r\nGarage_Qual\r\n0\r\n1\r\nFALSE\r\n6\r\nTyp: 2615, No_: 159, Fai: 124, Goo: 24\r\nGarage_Cond\r\n0\r\n1\r\nFALSE\r\n6\r\nTyp: 2665, No_: 159, Fai: 74, Goo: 15\r\nPaved_Drive\r\n0\r\n1\r\nFALSE\r\n3\r\nPav: 2652, Dir: 216, Par: 62\r\nPool_QC\r\n0\r\n1\r\nFALSE\r\n5\r\nNo_: 2917, Exc: 4, Goo: 4, Typ: 3\r\nFence\r\n0\r\n1\r\nFALSE\r\n5\r\nNo_: 2358, Min: 330, Goo: 118, Goo: 112\r\nMisc_Feature\r\n0\r\n1\r\nFALSE\r\n6\r\nNon: 2824, She: 95, Gar: 5, Oth: 4\r\nSale_Type\r\n0\r\n1\r\nFALSE\r\n10\r\nWD : 2536, New: 239, COD: 87, Con: 26\r\nSale_Condition\r\n0\r\n1\r\nFALSE\r\n6\r\nNor: 2413, Par: 245, Abn: 190, Fam: 46\r\nVariable type: numeric\r\nskim_variable\r\nn_missing\r\ncomplete_rate\r\nmean\r\nsd\r\np0\r\np25\r\np50\r\np75\r\np100\r\nhist\r\nLot_Frontage\r\n0\r\n1\r\n57.65\r\n33.50\r\n0.00\r\n43.00\r\n63.00\r\n78.00\r\n313.00\r\n▇▇▁▁▁\r\nLot_Area\r\n0\r\n1\r\n10147.92\r\n7880.02\r\n1300.00\r\n7440.25\r\n9436.50\r\n11555.25\r\n215245.00\r\n▇▁▁▁▁\r\nYear_Built\r\n0\r\n1\r\n1971.36\r\n30.25\r\n1872.00\r\n1954.00\r\n1973.00\r\n2001.00\r\n2010.00\r\n▁▂▃▆▇\r\nYear_Remod_Add\r\n0\r\n1\r\n1984.27\r\n20.86\r\n1950.00\r\n1965.00\r\n1993.00\r\n2004.00\r\n2010.00\r\n▅▂▂▃▇\r\nMas_Vnr_Area\r\n0\r\n1\r\n101.10\r\n178.63\r\n0.00\r\n0.00\r\n0.00\r\n162.75\r\n1600.00\r\n▇▁▁▁▁\r\nBsmtFin_SF_1\r\n0\r\n1\r\n4.18\r\n2.23\r\n0.00\r\n3.00\r\n3.00\r\n7.00\r\n7.00\r\n▃▂▇▁▇\r\nBsmtFin_SF_2\r\n0\r\n1\r\n49.71\r\n169.14\r\n0.00\r\n0.00\r\n0.00\r\n0.00\r\n1526.00\r\n▇▁▁▁▁\r\nBsmt_Unf_SF\r\n0\r\n1\r\n559.07\r\n439.54\r\n0.00\r\n219.00\r\n465.50\r\n801.75\r\n2336.00\r\n▇▅▂▁▁\r\nTotal_Bsmt_SF\r\n0\r\n1\r\n1051.26\r\n440.97\r\n0.00\r\n793.00\r\n990.00\r\n1301.50\r\n6110.00\r\n▇▃▁▁▁\r\nFirst_Flr_SF\r\n0\r\n1\r\n1159.56\r\n391.89\r\n334.00\r\n876.25\r\n1084.00\r\n1384.00\r\n5095.00\r\n▇▃▁▁▁\r\nSecond_Flr_SF\r\n0\r\n1\r\n335.46\r\n428.40\r\n0.00\r\n0.00\r\n0.00\r\n703.75\r\n2065.00\r\n▇▃▂▁▁\r\nLow_Qual_Fin_SF\r\n0\r\n1\r\n4.68\r\n46.31\r\n0.00\r\n0.00\r\n0.00\r\n0.00\r\n1064.00\r\n▇▁▁▁▁\r\nGr_Liv_Area\r\n0\r\n1\r\n1499.69\r\n505.51\r\n334.00\r\n1126.00\r\n1442.00\r\n1742.75\r\n5642.00\r\n▇▇▁▁▁\r\nBsmt_Full_Bath\r\n0\r\n1\r\n0.43\r\n0.52\r\n0.00\r\n0.00\r\n0.00\r\n1.00\r\n3.00\r\n▇▆▁▁▁\r\nBsmt_Half_Bath\r\n0\r\n1\r\n0.06\r\n0.25\r\n0.00\r\n0.00\r\n0.00\r\n0.00\r\n2.00\r\n▇▁▁▁▁\r\nFull_Bath\r\n0\r\n1\r\n1.57\r\n0.55\r\n0.00\r\n1.00\r\n2.00\r\n2.00\r\n4.00\r\n▁▇▇▁▁\r\nHalf_Bath\r\n0\r\n1\r\n0.38\r\n0.50\r\n0.00\r\n0.00\r\n0.00\r\n1.00\r\n2.00\r\n▇▁▅▁▁\r\nBedroom_AbvGr\r\n0\r\n1\r\n2.85\r\n0.83\r\n0.00\r\n2.00\r\n3.00\r\n3.00\r\n8.00\r\n▁▇▂▁▁\r\nKitchen_AbvGr\r\n0\r\n1\r\n1.04\r\n0.21\r\n0.00\r\n1.00\r\n1.00\r\n1.00\r\n3.00\r\n▁▇▁▁▁\r\nTotRms_AbvGrd\r\n0\r\n1\r\n6.44\r\n1.57\r\n2.00\r\n5.00\r\n6.00\r\n7.00\r\n15.00\r\n▁▇▂▁▁\r\nFireplaces\r\n0\r\n1\r\n0.60\r\n0.65\r\n0.00\r\n0.00\r\n1.00\r\n1.00\r\n4.00\r\n▇▇▁▁▁\r\nGarage_Cars\r\n0\r\n1\r\n1.77\r\n0.76\r\n0.00\r\n1.00\r\n2.00\r\n2.00\r\n5.00\r\n▅▇▂▁▁\r\nGarage_Area\r\n0\r\n1\r\n472.66\r\n215.19\r\n0.00\r\n320.00\r\n480.00\r\n576.00\r\n1488.00\r\n▃▇▃▁▁\r\nWood_Deck_SF\r\n0\r\n1\r\n93.75\r\n126.36\r\n0.00\r\n0.00\r\n0.00\r\n168.00\r\n1424.00\r\n▇▁▁▁▁\r\nOpen_Porch_SF\r\n0\r\n1\r\n47.53\r\n67.48\r\n0.00\r\n0.00\r\n27.00\r\n70.00\r\n742.00\r\n▇▁▁▁▁\r\nEnclosed_Porch\r\n0\r\n1\r\n23.01\r\n64.14\r\n0.00\r\n0.00\r\n0.00\r\n0.00\r\n1012.00\r\n▇▁▁▁▁\r\nThree_season_porch\r\n0\r\n1\r\n2.59\r\n25.14\r\n0.00\r\n0.00\r\n0.00\r\n0.00\r\n508.00\r\n▇▁▁▁▁\r\nScreen_Porch\r\n0\r\n1\r\n16.00\r\n56.09\r\n0.00\r\n0.00\r\n0.00\r\n0.00\r\n576.00\r\n▇▁▁▁▁\r\nPool_Area\r\n0\r\n1\r\n2.24\r\n35.60\r\n0.00\r\n0.00\r\n0.00\r\n0.00\r\n800.00\r\n▇▁▁▁▁\r\nMisc_Val\r\n0\r\n1\r\n50.64\r\n566.34\r\n0.00\r\n0.00\r\n0.00\r\n0.00\r\n17000.00\r\n▇▁▁▁▁\r\nMo_Sold\r\n0\r\n1\r\n6.22\r\n2.71\r\n1.00\r\n4.00\r\n6.00\r\n8.00\r\n12.00\r\n▅▆▇▃▃\r\nYear_Sold\r\n0\r\n1\r\n2007.79\r\n1.32\r\n2006.00\r\n2007.00\r\n2008.00\r\n2009.00\r\n2010.00\r\n▇▇▇▇▃\r\nSale_Price\r\n0\r\n1\r\n180796.06\r\n79886.69\r\n12789.00\r\n129500.00\r\n160000.00\r\n213500.00\r\n755000.00\r\n▇▇▁▁▁\r\nLongitude\r\n0\r\n1\r\n-93.64\r\n0.03\r\n-93.69\r\n-93.66\r\n-93.64\r\n-93.62\r\n-93.58\r\n▅▅▇▆▁\r\nLatitude\r\n0\r\n1\r\n42.03\r\n0.02\r\n41.99\r\n42.02\r\n42.03\r\n42.05\r\n42.06\r\n▂▂▇▇▇\r\n\r\nCreate training and test samples.\r\n\r\n\r\n# Create training (70%) and test (30%) sets for the AmesHousing::make_ames() data.\r\n# Use set.seed for reproducibility\r\n\r\nset.seed(123)\r\names_split <- initial_split(AmesHousing::make_ames(), prop = .7)\r\names_train <- training(ames_split)\r\names_test  <- testing(ames_split)\r\n\r\n\r\n\r\nConstruct a tree on the training sample\r\n\r\n\r\nm1 <- rpart(\r\n  formula = Sale_Price ~ .,\r\n  data    = ames_train,\r\n  method  = \"anova\"\r\n  )\r\n\r\nclass(m1)\r\n\r\n\r\n[1] \"rpart\"\r\n\r\nm1\r\n\r\n\r\nn= 2051 \r\n\r\nnode), split, n, deviance, yval\r\n      * denotes terminal node\r\n\r\n 1) root 2051 1.273987e+13 180775.50  \r\n   2) Overall_Qual=Very_Poor,Poor,Fair,Below_Average,Average,Above_Average,Good 1703 4.032269e+12 156431.40  \r\n     4) Neighborhood=North_Ames,Old_Town,Edwards,Sawyer,Mitchell,Brookside,Iowa_DOT_and_Rail_Road,South_and_West_of_Iowa_State_University,Meadow_Village,Briardale,Northpark_Villa,Blueste 1015 1.360332e+12 131803.50  \r\n       8) First_Flr_SF< 1048.5 611 4.924281e+11 118301.50  \r\n        16) Overall_Qual=Very_Poor,Poor,Fair,Below_Average 152 1.053743e+11  91652.57 *\r\n        17) Overall_Qual=Average,Above_Average,Good 459 2.433622e+11 127126.40 *\r\n       9) First_Flr_SF>=1048.5 404 5.880574e+11 152223.50  \r\n        18) Gr_Liv_Area< 2007.5 359 2.957141e+11 145749.50 *\r\n        19) Gr_Liv_Area>=2007.5 45 1.572566e+11 203871.90 *\r\n     5) Neighborhood=College_Creek,Somerset,Northridge_Heights,Gilbert,Northwest_Ames,Sawyer_West,Crawford,Timberland,Northridge,Stone_Brook,Clear_Creek,Bloomington_Heights,Veenker,Green_Hills 688 1.148069e+12 192764.70  \r\n      10) Gr_Liv_Area< 1725.5 482 5.162415e+11 178531.00  \r\n        20) Total_Bsmt_SF< 1331 352 2.315412e+11 167759.00 *\r\n        21) Total_Bsmt_SF>=1331 130 1.332603e+11 207698.30 *\r\n      11) Gr_Liv_Area>=1725.5 206 3.056877e+11 226068.80 *\r\n   3) Overall_Qual=Very_Good,Excellent,Very_Excellent 348 2.759339e+12 299907.90  \r\n     6) Overall_Qual=Very_Good 249 9.159879e+11 268089.10  \r\n      12) Gr_Liv_Area< 1592.5 78 1.339905e+11 220448.90 *\r\n      13) Gr_Liv_Area>=1592.5 171 5.242201e+11 289819.70 *\r\n     7) Overall_Qual=Excellent,Very_Excellent 99 9.571896e+11 379937.20  \r\n      14) Gr_Liv_Area< 1947 42 7.265064e+10 325865.10 *\r\n      15) Gr_Liv_Area>=1947 57 6.712559e+11 419779.80  \r\n        30) Neighborhood=Old_Town,Edwards,Timberland 7 8.073100e+10 295300.00 *\r\n        31) Neighborhood=College_Creek,Somerset,Northridge_Heights,Northridge,Stone_Brook 50 4.668730e+11 437207.00  \r\n          62) Total_Bsmt_SF< 2168.5 40 1.923959e+11 408996.90 *\r\n          63) Total_Bsmt_SF>=2168.5 10 1.153154e+11 550047.30 *\r\n\r\nPlot the fitted tree\r\n\r\n\r\n\r\nVisualize the cross validation experiment\r\n\r\n\r\nplotcp(m1)\r\n\r\n\r\n\r\n\r\nWe can force a larger tree to be fit\r\n\r\n\r\nm2 <- rpart(\r\n    formula = Sale_Price ~ .,\r\n    data    = ames_train,\r\n    method  = \"anova\", \r\n    control = list(cp = 0, xval = 10)\r\n)\r\n\r\nplotcp(m2)\r\n\r\n\r\n\r\n\r\nThe data underlying cross validation can be extracted\r\n\r\n\r\nm1$cptable\r\n\r\n\r\n           CP nsplit rel error    xerror       xstd\r\n1  0.46690132      0 1.0000000 1.0009222 0.05855161\r\n2  0.11961409      1 0.5330987 0.5347929 0.03116217\r\n3  0.06955813      2 0.4134846 0.4151417 0.03058554\r\n4  0.02559992      3 0.3439265 0.3461258 0.02207839\r\n5  0.02196620      4 0.3183265 0.3242197 0.02182111\r\n6  0.02023390      5 0.2963603 0.3074877 0.02129292\r\n7  0.01674138      6 0.2761264 0.2963372 0.02106996\r\n8  0.01188709      7 0.2593850 0.2795199 0.01903482\r\n9  0.01127889      8 0.2474980 0.2762666 0.01936472\r\n10 0.01109955      9 0.2362191 0.2699895 0.01902217\r\n11 0.01060346     11 0.2140200 0.2672133 0.01883219\r\n12 0.01000000     12 0.2034165 0.2635207 0.01881691\r\n\r\nNow predict on the test set:\r\n\r\n\r\npred <- predict(m1, newdata = ames_test)\r\np_error <- Metrics::rmse(actual = ames_test$Sale_Price, predicted = pred)\r\np_error\r\n\r\n\r\n[1] 39852.01\r\n\r\ne.g.,the average distance between predicted values and actuals is 39,852 dollars.\r\n\r\nBreiman et al. (1984), ``Classification and Regression Trees’’↩︎\r\n",
    "preview": "https://static.packt-cdn.com/products/9781788830577/graphics/a480732e-a17a-4220-8b7d-e04d7430bce1.png",
    "last_modified": "2021-02-08T05:52:38+08:00",
    "input_file": {}
  }
]
